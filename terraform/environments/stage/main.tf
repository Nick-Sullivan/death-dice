terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "4.48.0"
    }
  }
  backend "s3" {
    bucket = "nicks-terraform-states"
    key    = "death_dice/stage/terraform.tfstate"
    region = "ap-southeast-2"
  }
}

locals {
  prefix            = "DeathDiceStage"
  prefix_lower      = "death-dice-stage"
  auth_callback_url = "http://localhost:5500/website/"
  auth_domain       = lower(local.prefix)
  tags = {
    Project = "Death Dice Stage"
  }
}

provider "aws" {
  region = "ap-southeast-2"
  default_tags {
    tags = local.tags
  }
}

# Create an API with a URL, to be populated later

module "game_api_gateway_shell" {
  source = "./../../modules/game_api_gateway_shell"
  name   = local.prefix
}

# Create a database to store game state

module "database" {
  source = "./../../modules/database"
  prefix = local.prefix
}

# Create the lambdas that will interact with the database

module "game_lambdas" {
  source        = "./../../modules/game_lambdas"
  prefix        = local.prefix
  lambda_folder = "${path.root}/../../../lambda/game"
  table_arn     = module.database.table_arn
  gateway_url   = module.game_api_gateway_shell.gateway_url
}

# Populate the API so it will trigger the lambdas

module "game_api_gateway_integration" {
  source        = "./../../modules/game_api_gateway_integration"
  lambdas       = module.game_lambdas.lambdas
  websocket_id  = module.game_api_gateway_shell.websocket_id
  websocket_arn = module.game_api_gateway_shell.websocket_arn
}

# Create a dashboard for observing correct behaviour

module "cloudwatch" {
  source  = "./../../modules/cloudwatch"
  name    = local.prefix
  project = local.tags.Project
}

# Authenticate users

module "cognito" {
  source       = "./../../modules/cognito"
  name         = local.prefix
  callback_url = local.auth_callback_url
  domain       = local.auth_domain
}

# Save output for use website/app

resource "local_file" "website" {
  content  = <<-EOT
    // This file is automatically generated by terraform
    const clientId = "${module.cognito.client_id}"
    const gatewayUrl = "${module.game_api_gateway_shell.gateway_url}"
    const authDomain = "${local.auth_domain}"
    const authRedirectUrl = "${local.auth_callback_url}"
  EOT
  filename = "../../../website/js/terraform.js"
}

resource "local_file" "flutter" {
  content  = <<-EOT
    # This file is automatically generated by terraform
    WEBSOCKET_URL="${module.game_api_gateway_shell.gateway_url}"
    COGNITO_USER_POOL="${module.cognito.user_pool_id}"
    COGNITO_CLIENT_ID="${module.cognito.client_id}"
  EOT
  filename = "../../../flutter/.env"
}

# Store a database history for analytics

module "kinesis" {
  source        = "./../../modules/kinesis"
  prefix        = local.prefix
  prefix_lower  = local.prefix_lower
  table_name    = module.database.table_name
  lambda_folder = "${path.root}/../../../lambda/analytics"
}

# Athena for analytics

resource "aws_athena_database" "example" {
  name   = "tf_database"
  bucket = module.kinesis.s3_name
}

resource "aws_athena_workgroup" "example" {
  # Processor settings
  name          = "tf_workgroup"
  force_destroy = true
  configuration {
    bytes_scanned_cutoff_per_query     = 10 * 1024 * 1024 // bytes, minimum 10 MB
    publish_cloudwatch_metrics_enabled = true

    result_configuration {
      output_location = "s3://${module.kinesis.s3_name}/athena"
    }
  }
}

resource "aws_glue_catalog_table" "connection" {
  name          = "connection"
  database_name = aws_athena_database.example.name
  table_type    = "EXTERNAL_TABLE"
  parameters = {
    EXTERNAL       = "TRUE"
    classification = "json"
  }

  storage_descriptor {
    location = "s3://${module.kinesis.s3_name}/data/table=Connection/"

    input_format  = "org.apache.hadoop.mapred.TextInputFormat"
    output_format = "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat"

    ser_de_info {
      serialization_library = "org.openx.data.jsonserde.JsonSerDe"
      parameters = {
        "serialization.format"  = 1
        "ignore.malformed.json" = false
        "dots.in.keys"          = false
        "case.insensitive"      = true
        "mapping"               = true
      }
    }

    columns {
      name = "meta_event_type"
      type = "string"
    }
    columns {
      name = "modified_action"
      type = "string"
    }
    columns {
      name = "modified_at"
      type = "timestamp"
    }
    columns {
      name = "id"
      type = "string"
    }
    columns {
      name = "account_id"
      type = "string"
    }
    columns {
      name = "game_id"
      type = "string"
    }
    columns {
      name = "version"
      type = "int"
    }

  }
}

resource "aws_glue_catalog_table" "game" {
  name          = "game"
  database_name = aws_athena_database.example.name
  table_type    = "EXTERNAL_TABLE"
  parameters = {
    EXTERNAL       = "TRUE"
    classification = "json"
  }

  storage_descriptor {
    location = "s3://${module.kinesis.s3_name}/data/table=Game/"

    input_format  = "org.apache.hadoop.mapred.TextInputFormat"
    output_format = "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat"

    ser_de_info {
      serialization_library = "org.openx.data.jsonserde.JsonSerDe"
      parameters = {
        "serialization.format"  = 1
        "ignore.malformed.json" = false
        "dots.in.keys"          = false
        "case.insensitive"      = true
        "mapping"               = true
      }
    }

    columns {
      name = "meta_event_type"
      type = "string"
    }
    columns {
      name = "modified_action"
      type = "string"
    }
    columns {
      name = "modified_at"
      type = "timestamp"
    }
    columns {
      name = "modified_by"
      type = "string"
    }
    columns {
      name = "id"
      type = "string"
    }
    columns {
      name = "version"
      type = "int"
    }
    columns {
      name = "round_finished"
      type = "boolean"
    }
    columns {
      name = "mr_eleven"
      type = "string"
    }
    # Whitespace is not allowed
    columns {
      name = "players"
      type = "array<struct<nickname:string,finished:boolean,id:string,win_counter:int,outcome:string>>"
    }

  }
}

resource "aws_athena_named_query" "connection_list" {
  name      = "connection_list"
  workgroup = aws_athena_workgroup.example.id
  database  = aws_athena_database.example.name
  query     = <<-EOT
    SELECT
      *
    FROM 
      ${aws_glue_catalog_table.connection.name}
    LIMIT 10;
  EOT
}

resource "aws_athena_named_query" "game_list" {
  name      = "game_list"
  workgroup = aws_athena_workgroup.example.id
  database  = aws_athena_database.example.name
  query     = <<-EOT
    SELECT
      *
    FROM 
      ${aws_glue_catalog_table.game.name}
    LIMIT 10;
  EOT
}

resource "aws_athena_named_query" "game_count" {
  name      = "game_count"
  workgroup = aws_athena_workgroup.example.id
  database  = aws_athena_database.example.name
  query     = <<-EOT
    SELECT
      COUNT(*) AS game_count
    FROM 
      ${aws_glue_catalog_table.game.name}
    WHERE
      modified_action = 'CREATE_GAME';
  EOT
}

# Lambda for accessing athena analytics

module "analytics_lambdas" {
  source        = "./../../modules/analytics_lambdas"
  prefix        = "${local.prefix}Analytics"
  lambda_folder = "${path.root}/../../../lambda/analytics"
  athena_s3_output_arn = module.kinesis.s3_arn
  athena_workgroup_arn = aws_athena_workgroup.example.arn
  athena_workgroup_name = aws_athena_workgroup.example.name
  athena_query_game_count_id = aws_athena_named_query.game_count.id
  glue_database_id = aws_athena_database.example.id
  glue_table_arn = aws_glue_catalog_table.game.arn
}

module "analytics_api_gateway" {
  source      = "./../../modules/analytics_api_gateway"
  name        = "${local.prefix}Analytics"
  lambda_name = module.analytics_lambdas.lambdas["GetStatistics"].name
  lambda_uri  = module.analytics_lambdas.lambdas["GetStatistics"].uri
}