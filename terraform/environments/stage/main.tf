terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "4.48.0"
    }
  }
  backend "s3" {
    bucket = "nicks-terraform-states"
    key    = "death_dice/stage/terraform.tfstate"
    region = "ap-southeast-2"
  }
}

locals {
  prefix            = "DeathDiceStage"
  prefix_lower      = "death-dice-stage"
  auth_callback_url = "http://localhost:5500/website/"
  auth_domain       = lower(local.prefix)
  tags = {
    Project = "Death Dice Stage"
  }
}

provider "aws" {
  region = "ap-southeast-2"
  default_tags {
    tags = local.tags
  }
}

# Create an API with a URL, to be populated later

module "api_gateway_shell" {
  source = "./../../modules/api_gateway_shell"
  name   = local.prefix
}

# Create a database to store game state

module "database" {
  source = "./../../modules/database"
  prefix = local.prefix
}

# Create the lambdas that will interact with the database

module "lambdas" {
  source        = "./../../modules/lambdas"
  prefix        = local.prefix
  lambda_folder = "${path.root}/../../../lambda"
  table_arn     = module.database.table_arn
  gateway_url   = module.api_gateway_shell.gateway_url
}

# Populate the API so it will trigger the lambdas

module "api_gateway_integration" {
  source        = "./../../modules/api_gateway_integration"
  lambdas       = module.lambdas.lambdas
  websocket_id  = module.api_gateway_shell.websocket_id
  websocket_arn = module.api_gateway_shell.websocket_arn
}

# Create a dashboard for observing correct behaviour

module "cloudwatch" {
  source  = "./../../modules/cloudwatch"
  name    = local.prefix
  project = local.tags.Project
}

# Authenticate users

module "cognito" {
  source       = "./../../modules/cognito"
  name         = local.prefix
  callback_url = local.auth_callback_url
  domain       = local.auth_domain
}

# Save output for use website/app

resource "local_file" "website" {
  content  = <<-EOT
    // This file is automatically generated by terraform
    const clientId = "${module.cognito.client_id}"
    const gatewayUrl = "${module.api_gateway_shell.gateway_url}"
    const authDomain = "${local.auth_domain}"
    const authRedirectUrl = "${local.auth_callback_url}"
  EOT
  filename = "../../../website/js/terraform.js"
}

resource "local_file" "flutter" {
  content  = <<-EOT
    # This file is automatically generated by terraform
    WEBSOCKET_URL="${module.api_gateway_shell.gateway_url}"
    COGNITO_USER_POOL="${module.cognito.user_pool_id}"
    COGNITO_CLIENT_ID="${module.cognito.client_id}"
  EOT
  filename = "../../../flutter/.env"
}

# Store a database history for analytics

module "kinesis" {
  source        = "./../../modules/kinesis"
  prefix        = local.prefix
  prefix_lower  = local.prefix_lower
  table_name    = module.database.table_name
  lambda_folder = "${path.root}/../../../lambda"
}


# # # Store long-term data in a column-based database

# # resource "aws_redshiftserverless_namespace" "example" {
# #   namespace_name = "tf-namespace"
# #   # admin_username = "admin"
# #   # admin_user_password = "admin"
# #   # db_name = "tf-db"
# # }

# # resource "aws_redshiftserverless_workgroup" "example" {
# #   depends_on = [aws_redshiftserverless_namespace.example]
# #   namespace_name = "tf-namespace"
# #   workgroup_name = "tf-workgroup"

# #   # Applying any of these parameters screws it up :/ 
# #   # config_parameter {
# #   #   parameter_key = "auto_mv"
# #   #   parameter_value = true
# #   # }
# #   # config_parameter {
# #   #   parameter_key = "datestyle"
# #   #   parameter_value = "ISO, MDY"
# #   # }
# #   # # config_parameter {
# #   # #   parameter_key = "enable_case_sensitive_identifier"
# #   # #   parameter_value = "false"
# #   # # }
# #   # config_parameter {
# #   #   parameter_key = "enable_user_activity_logging"
# #   #   parameter_value = "true"
# #   # }
# #   # config_parameter {
# #   #   parameter_key = "query_group"
# #   #   parameter_value = "default"
# #   # }
# #   # config_parameter {
# #   #   parameter_key = "search_path"
# #   #   parameter_value = "$user, public"
# #   # }
# #   # config_parameter {
# #   #   # {
# #   #     parameter_key = "max_query_execution_time"
# #   #     parameter_value = 10  # seconds
# #   #   # }
# #   # }
# # }

# # resource "aws_redshiftserverless_usage_limit" "example" {
# #   resource_arn = aws_redshiftserverless_workgroup.example.arn
# #   usage_type   = "serverless-compute"
# #   amount       = 1  # hours
# #   period       = "monthly"
# #   breach_action = "deactivate"  # perpetually applies :/ 
# # }


