terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "4.48.0"
    }
  }
  backend "s3" {
    bucket = "nicks-terraform-states"
    key    = "death_dice/stage/terraform.tfstate"
    region = "ap-southeast-2"
  }
}

locals {
  prefix                   = "DeathDiceStage"
  prefix_lower             = "death-dice-stage"
  prefix_underscore        = "death_dice_stage"
  auth_callback_url        = "http://localhost:5500/website/"
  auth_domain              = lower(local.prefix)
  s3_database_history_name = "death-dice-stage-database-history"
  tags = {
    Project = "Death Dice Stage"
  }
}

provider "aws" {
  region = "ap-southeast-2"
  default_tags {
    tags = local.tags
  }
}

# Create an API with a URL, to be populated later

module "game_api_gateway_shell" {
  source = "./../../modules/game_api_gateway_shell"
  name   = local.prefix
}

# Create a database to store game state

module "game_database" {
  source = "./../../modules/game_database"
  prefix = local.prefix
}

# Create the lambdas that will interact with the database

module "game_lambdas" {
  source        = "./../../modules/game_lambdas"
  prefix        = local.prefix
  lambda_folder = "${path.root}/../../../lambda/game"
  gateway_url   = module.game_api_gateway_shell.gateway_url
  table_arn     = module.game_database.table_arn
}

# Populate the API so it will trigger the lambdas

module "game_api_gateway_integration" {
  source        = "./../../modules/game_api_gateway_integration"
  lambdas       = module.game_lambdas.lambdas
  websocket_id  = module.game_api_gateway_shell.websocket_id
  websocket_arn = module.game_api_gateway_shell.websocket_arn
}

# Create a dashboard for observing correct behaviour

module "monitoring_cloudwatch" {
  source  = "./../../modules/monitoring_cloudwatch"
  name    = local.prefix
  project = local.tags.Project
}

# Authenticate users

module "cognito" {
  source       = "./../../modules/cognito"
  name         = local.prefix
  callback_url = local.auth_callback_url
  domain       = local.auth_domain
}

# Save output for use website/app

resource "local_file" "website" {
  content  = <<-EOT
    // This file is automatically generated by terraform
    const clientId = "${module.cognito.client_id}"
    const gatewayUrl = "${module.game_api_gateway_shell.gateway_url}"
    const authDomain = "${local.auth_domain}"
    const authRedirectUrl = "${local.auth_callback_url}"
  EOT
  filename = "../../../website/js/terraform.js"
}

resource "local_file" "flutter" {
  content  = <<-EOT
    # This file is automatically generated by terraform
    WEBSOCKET_URL="${module.game_api_gateway_shell.gateway_url}"
    COGNITO_USER_POOL="${module.cognito.user_pool_id}"
    COGNITO_CLIENT_ID="${module.cognito.client_id}"
  EOT
  filename = "../../../flutter/.env"
}

# Extract the data into s3 TODO- failures

module "analytics_extraction" {
  source        = "./../../modules/analytics_extraction"
  prefix        = local.prefix
  prefix_lower  = local.prefix_lower
  lambda_folder = "${path.root}/../../../lambda/extraction"
  s3_name       = local.s3_database_history_name
  stream_arn    = module.game_database.stream_arn
}

# Athena for analytics

module "analytics_athena" {
  source            = "./../../modules/analytics_athena"
  prefix            = local.prefix
  prefix_underscore = local.prefix_underscore
  s3_name           = module.analytics_extraction.s3_name
}

# Lambda for orchestrating analytics

module "analytics_lambdas" {
  source                    = "./../../modules/analytics_lambdas"
  prefix                    = "${local.prefix}Analytics"
  lambda_folder             = "${path.root}/../../../lambda/analytics"
  athena_s3_output_arn      = module.analytics_extraction.s3_arn
  athena_workgroup_arn      = module.analytics_athena.workgroup_arn
  athena_workgroup_name     = module.analytics_athena.workgroup_name
  athena_query_id           = module.analytics_athena.query_id
  glue_database_id          = module.analytics_athena.glue_database_id
  glue_connection_table_arn = module.analytics_athena.glue_connection_table_arn
  glue_game_table_arn       = module.analytics_athena.glue_game_table_arn
  dynamodb_table_arn = aws_dynamodb_table.analytics_cache.arn
}

# API for accessing analytics results

module "analytics_api_gateway" {
  source                = "./../../modules/analytics_api_gateway"
  name                  = "${local.prefix}Analytics"
  cognito_user_pool_arn = module.cognito.user_pool_arn
  lambda_name           = module.analytics_lambdas.lambdas["StartQuery"].name
  lambda_uri            = module.analytics_lambdas.lambdas["StartQuery"].uri
}

# Log when rule fires


resource "aws_cloudwatch_event_rule" "events" {
  name        = "${local.prefix}-AthenaQuerySucceeded"
  description = ""

  event_pattern = <<-EOF
    {
      "source": ["aws.athena"],
      "detail-type": ["Athena Query State Change"],
      "detail": {
        "workgroupName": ["${module.analytics_athena.workgroup_name}"],
        "currentState": ["SUCCEEDED"]
      }
    }
  EOF
}

resource "aws_cloudwatch_event_target" "events" {
  rule      = aws_cloudwatch_event_rule.events.name
  target_id = "SendToCloudWatch"
  arn       = aws_cloudwatch_log_group.events.arn
  retry_policy {
    maximum_retry_attempts       = 0
    maximum_event_age_in_seconds = 24 * 60 * 60
  }
  # dead_letter_config {
  # arn = 
  # }
}

resource "aws_cloudwatch_log_group" "events" {
  name              = "/aws/events/${aws_cloudwatch_event_rule.events.name}"
  retention_in_days = 90
}

# Invoke lambda when rule fires

resource "aws_cloudwatch_event_target" "lambda" {
  rule      = aws_cloudwatch_event_rule.events.name
  target_id = "InvokeCacheLambda"
  arn       = module.analytics_lambdas.lambdas["CacheResult"].arn
  retry_policy {
    maximum_retry_attempts       = 0
    maximum_event_age_in_seconds = 24 * 60 * 60
  }
  # dead_letter_config {
  # arn = 
  # }
}

resource "aws_lambda_permission" "all" {
  statement_id  = "AllowExecutionFromEventBus"
  action        = "lambda:InvokeFunction"
  function_name = module.analytics_lambdas.lambdas["CacheResult"].name
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.events.arn
}

# Table for caching

resource "aws_dynamodb_table" "analytics_cache" {
  name         = "${local.prefix}AnalyticsCache"
  hash_key     = "id"
  billing_mode = "PAY_PER_REQUEST"
  attribute {
    name = "id"
    type = "S"
  }
}

