terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "4.48.0"
    }
  }
  backend "s3" {
    bucket = "nicks-terraform-states"
    key    = "death_dice/stage/terraform.tfstate"
    region = "ap-southeast-2"
  }
}

locals {
  prefix            = "DeathDiceStage"
  prefix_lower      = "death-dice-stage"
  prefix_underscore = "death_dice_stage"
  auth_callback_url = "http://localhost:5500/website/"
  auth_domain       = lower(local.prefix)
  tags = {
    Project = "Death Dice Stage"
  }
}

provider "aws" {
  region = "ap-southeast-2"
  default_tags {
    tags = local.tags
  }
}

# Create an API with a URL, to be populated later

module "game_api_gateway_shell" {
  source = "./../../modules/game_api_gateway_shell"
  name   = local.prefix
}

# Create a database to store game state

module "database" {
  source = "./../../modules/database"
  prefix = local.prefix
}

# Create the lambdas that will interact with the database

module "game_lambdas" {
  source        = "./../../modules/game_lambdas"
  prefix        = local.prefix
  lambda_folder = "${path.root}/../../../lambda/game"
  table_arn     = module.database.table_arn
  gateway_url   = module.game_api_gateway_shell.gateway_url
}

# Populate the API so it will trigger the lambdas

module "game_api_gateway_integration" {
  source        = "./../../modules/game_api_gateway_integration"
  lambdas       = module.game_lambdas.lambdas
  websocket_id  = module.game_api_gateway_shell.websocket_id
  websocket_arn = module.game_api_gateway_shell.websocket_arn
}

# Create a dashboard for observing correct behaviour

module "cloudwatch" {
  source  = "./../../modules/cloudwatch"
  name    = local.prefix
  project = local.tags.Project
}

# Authenticate users

module "cognito" {
  source       = "./../../modules/cognito"
  name         = local.prefix
  callback_url = local.auth_callback_url
  domain       = local.auth_domain
}

# Save output for use website/app

resource "local_file" "website" {
  content  = <<-EOT
    // This file is automatically generated by terraform
    const clientId = "${module.cognito.client_id}"
    const gatewayUrl = "${module.game_api_gateway_shell.gateway_url}"
    const authDomain = "${local.auth_domain}"
    const authRedirectUrl = "${local.auth_callback_url}"
  EOT
  filename = "../../../website/js/terraform.js"
}

resource "local_file" "flutter" {
  content  = <<-EOT
    # This file is automatically generated by terraform
    WEBSOCKET_URL="${module.game_api_gateway_shell.gateway_url}"
    COGNITO_USER_POOL="${module.cognito.user_pool_id}"
    COGNITO_CLIENT_ID="${module.cognito.client_id}"
  EOT
  filename = "../../../flutter/.env"
}

# Extract the data into s3 TODO- failures

module "extraction" {
  source        = "./../../modules/extraction"
  prefix        = local.prefix
  prefix_lower  = local.prefix_lower
  stream_arn    = module.database.stream_arn
  lambda_folder = "${path.root}/../../../lambda/extraction"
}

# Athena for analytics

module "athena" {
  source            = "./../../modules/athena"
  prefix            = local.prefix
  prefix_underscore = local.prefix_underscore
  s3_name           = module.extraction.s3_name
}


# Lambda for accessing athena analytics

module "analytics_lambdas" {
  source        = "./../../modules/analytics_lambdas"
  prefix        = "${local.prefix}Analytics"
  lambda_folder = "${path.root}/../../../lambda/analytics"
  athena_s3_output_arn = module.extraction.s3_arn
  athena_workgroup_arn = module.athena.workgroup_arn
  athena_workgroup_name = module.athena.workgroup_name
  athena_query_game_count_id = module.athena.query_game_count_id
  glue_database_id = module.athena.glue_database_id
  glue_table_arn = module.athena.glue_game_table_arn
}

# API for invoking Athena analytics

module "analytics_api_gateway" {
  source      = "./../../modules/analytics_api_gateway"
  name        = "${local.prefix}Analytics"
  lambda_name = module.analytics_lambdas.lambdas["GetStatistics"].name
  lambda_uri  = module.analytics_lambdas.lambdas["GetStatistics"].uri
}